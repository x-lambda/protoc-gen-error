package generator

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	fmtPkg             = protogen.GoImportPath("fmt")
	deprecationComment = "// Deprecated: Do not use."
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_error.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by github.com/x-lambda/protoc-gen-error. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the github.com/x-lambda/protoc-gen-error package it is being compiled against.")
	g.P("// ", fmtPkg.Ident(""))
	g.P()
	g.P()
	g.P("type BusinessError struct {")
	g.P("\tcode ErrorType")
	g.P("}")
	g.P()
	g.P("func (b *BusinessError) Message() string {")
	g.P("\treturn ErrorType_name[int32(b.code)]")
	g.P("}")
	g.P()
	g.P("func (b *BusinessError) Code() int {")
	g.P("\treturn int(b.code)")
	g.P("}")
	g.P()
	g.P("func (b *BusinessError) Error() string {")
	g.P("\treturn fmt.Sprintf(`{\"code\": %d, \"msg\": \"%s\"}`, b.code, b.Message())")
	g.P("}")
	g.P()
	g.P("func (b *BusinessError) HTTPCode() int { return 200 }")
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}

	return nil
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, s *protogen.Service) {
	if s.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	for _, v := range file.Enums {
		if v.Desc.Name() == "ErrorType" {
			for _, err := range v.Values {
				if err.Desc.Name() == "DefaultCode" {
					continue
				}

				g.P(fmt.Sprintf("// NewBusinessError%s: comment by generated", err.Desc.Name()))
				g.P(strings.TrimRight(err.Comments.Leading.String(), "\n"))
				g.P(fmt.Sprintf("func NewBusinessError%s() *BusinessError {", err.Desc.Name()))
				g.P(fmt.Sprintf("\treturn &BusinessError{code: ErrorType_%s}", err.Desc.Name()))
				g.P("}")
				g.P()
			}
		}
	}
}
